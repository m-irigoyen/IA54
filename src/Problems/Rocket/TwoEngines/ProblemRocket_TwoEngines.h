#ifndef PROBLEMROCKET_TWOENGINES_H_
#define PROBLEMROCKET_TWOENGINES_H_

#include <iostream>
#include <SFML/Graphics.hpp>

#include "Problems/Rocket/ProblemRocket.h"
#include "Utilities/MathHelper.h"


// World values
#define MARS_GRAVITY 4.0f			// Gravity acceleration in meters/seconds
#define SIZE_DEFAULT_WIDTH 100.0f
#define SIZE_DEFAULT_HEIGHT 100.0f

// HUD stuff
#define HUD_SIZE_THRUSTER 0.5f

// Rocket values
#define THRUSTER_STRENGTH 10.0f	// Strength of each thruster in meters/seconds
#define ANGLE_OFFSET 90.0f	// Offset to have 0° be up
#define PROBLEMROCKET_TWO_MAXENGINEROTATION 1.0f
#define PROBLEMROCKET_TWO_ROTATIONCHANGEFACTOR 1

// Problem values
#define PROBLEMROCKET_TWO_PROBLEM_MAXANGLE 45.0f	// The maximum angle the agents will deviate from 0

#define PROBLEMROCKET_TWO_PROBLEM_MAXHSPEED 20.0f
#define PROBLEMROCKET_TWO_PROBLEM_MAXVSPEED 40.0f

/*
* The Problem class creates and run the problem to be solved. (pendulum, drone, etc)
*/

enum AGENTTYPE_ROCKET_TWO
{
	ROCKET_TWO_RECEPTOR,
	ROCKET_TWO_DIRECTION,		// Guides the rocket towards destination
	ROCKET_TWO_ALTITUDE,			// Handles the rocket's altitude
	ROCKET_TWO_STABILIZER_ANGLE,	// Stabilizes the rockt's angle
	ROCKET_TWO_STABILIZER_HSPEED,	// Stabilizes the rocket's HSpeed
	ROCKET_TWO_STABILIZER_VSPEED	// Stabilizes the rocket's VSPeed
};

using namespace std;

class ProblemRocket_TwoEngines : public ProblemRocket
{
protected:
	sf::RectangleShape hud_engineFire;

	// PRIVATE FUNCTIONS
	// Rocket

	// PRIVATE FUNCTIONS
	// Physics stuff
	virtual void getThrustForce(float& hForce, float& vForce);	// Compute the thrust generated by the engines with current angle and current enginePowers values

	virtual void checkEvents(sf::RenderWindow* window);	// Checks for user input on the problem window
	virtual bool handleEvent(sf::RenderWindow* window, sf::Event event);	// Returns true if event has been dealt with

			//Rocket control
	virtual void initUserControl(bool userControl);
	virtual void resolveRocketPowerChange();	// Based on the desired power and rotation, resolve what's happening
	virtual void resolveRocketAngleChange();

	// Agent influence
	void resolveInfluences();

public:
	ProblemRocket_TwoEngines(float waveAmplLossPerSec = 0.0f);

	//virtual void run(sf::Time elapsedTime);	// Updating the problem
	virtual void draw(sf::RenderWindow* problemWindow);
	virtual void clean();
	virtual void init();	// init
	virtual void initGraphics(std::vector<sf::Font>* fonts);

	// Rocket handling : these modify the rocket directly.

	// Agents
};

#endif

